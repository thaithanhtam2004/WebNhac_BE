// src/web/controller/historyController.js
const HistoryService = require("../../services/historyService");

class HistoryController {
  // üü¢ L·∫•y l·ªãch s·ª≠ nghe c·ªßa user
  async getUserHistory(req, res) {
    try {
      const { userId } = req.params;
      const history = await HistoryService.getHistoryByUser(userId);
      res.status(200).json({ success: true, data: history });
    } catch (err) {
      res.status(500).json({ success: false, message: err.message });
    }
  }

  // üü¢ Th√™m b√†i h√°t v√†o l·ªãch s·ª≠ (ho·∫∑c update lastPlayed n·∫øu ƒë√£ t·ªìn t·∫°i)
  async addHistory(req, res) {
    try {
      const { userId, songId } = req.body;
      if (!userId || !songId) {
        return res
          .status(400)
          .json({ success: false, message: "Thi·∫øu userId ho·∫∑c songId" });
      }

      const result = await HistoryService.saveHistory(userId, songId);
      res.status(201).json({ success: true, data: result });
    } catch (err) {
      res.status(400).json({ success: false, message: err.message });
    }
  }

  // üü¢ C·∫≠p nh·∫≠t th·ªùi gian nghe (n·∫øu c·∫ßn ri√™ng endpoint)
  async updateHistory(req, res) {
    try {
      const { id } = req.params;
      const result = await HistoryService.updateHistoryTime(id);
      res.status(200).json({ success: true, message: result.message });
    } catch (err) {
      res.status(400).json({ success: false, message: err.message });
    }
  }

  // üü¢ X√≥a to√†n b·ªô l·ªãch s·ª≠ nghe c·ªßa user
  async clearHistory(req, res) {
    try {
      const { userId } = req.params;
      const result = await HistoryService.clearHistory(userId);
      res.status(200).json({ success: true, message: result.message });
    } catch (err) {
      res.status(400).json({ success: false, message: err.message });
    }
  }

  // üü¢ X√≥a 1 b√†i h√°t kh·ªèi l·ªãch s·ª≠ nghe
  async removeSong(req, res) {
    try {
      const { userId, songId } = req.body;
      if (!userId || !songId) {
        return res
          .status(400)
          .json({ success: false, message: "Thi·∫øu userId ho·∫∑c songId" });
      }

      const result = await HistoryService.removeSongFromHistory(userId, songId);
      res.status(200).json({ success: true, message: result.message });
    } catch (err) {
      res.status(400).json({ success: false, message: err.message });
    }
  }
}

module.exports = new HistoryController();
