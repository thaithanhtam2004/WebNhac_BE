const fs = require("fs");
const path = require("path");
const SongFeatureService = require("../../services/songFeatureService");

const SongFeatureController = {
  // üß† Ph√¢n t√≠ch c·∫£m x√∫c b√†i h√°t
  async analyze(req, res) {
    console.log("‚úÖ ƒê√£ nh·∫≠n request POST /api/features/analyze");

    try {
      const { songId, emotionId } = req.body;
      const file = req.file; // l·∫•y file t·ª´ multer

      // ‚úÖ Ki·ªÉm tra ƒë·∫ßu v√†o
      if (!songId) return res.status(400).json({ error: "Thi·∫øu songId" });
      if (!file) return res.status(400).json({ error: "Thi·∫øu file nh·∫°c" });

      // üü¢ T·∫°o th∆∞ m·ª•c l∆∞u file t·∫°m
      const uploadDir = path.join(__dirname, "../../uploads/audio");
      if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

      // üü¢ L∆∞u file v√†o ·ªï c·ª©ng t·∫°m th·ªùi
      const filePath = path.join(uploadDir, file.originalname);
      fs.writeFileSync(filePath, file.buffer);

      console.log("üìÇ ƒê√£ l∆∞u file t·∫°m t·∫°i:", filePath);

      // üß† G·ªçi service x·ª≠ l√Ω ph√¢n t√≠ch
      const result = await SongFeatureService.analyzeAndSave(songId, filePath, emotionId);

      // üßπ (T√πy ch·ªçn) X√≥a file sau khi x·ª≠ l√Ω xong ƒë·ªÉ tr√°nh r√°c
      fs.unlink(filePath, (err) => {
        if (err) console.error("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m:", err.message);
      });

      return res.json({
        success: true,
        message: "Ph√¢n t√≠ch c·∫£m x√∫c b√†i h√°t th√†nh c√¥ng!",
        data: result,
      });
    } catch (error) {
      console.error("‚ùå L·ªói trong analyze:", error);
      return res.status(500).json({ error: error.message });
    }
  },

  // üß† L·∫•y ƒë·∫∑c tr∆∞ng b√†i h√°t
  async getBySongId(req, res) {
    try {
      const { songId } = req.params;
      const feature = await SongFeatureService.getFeatureBySong(songId);
      res.json({ success: true, data: feature });
    } catch (error) {
      res.status(404).json({ error: error.message });
    }
  },
};

module.exports = SongFeatureController;
