const AlbumSongService = require("../../services/albumSongService");

class AlbumSongController {
  // üü© Th√™m m·ªôt b√†i h√°t v√†o album
  async addSongToAlbum(req, res) {
    try {
      const { albumId, songId } = req.params;

      if (!albumId || !songId) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu albumId ho·∫∑c songId",
        });
      }

      const result = await AlbumSongService.addSongToAlbum(albumId, songId);
      res.status(201).json({
        success: true,
        message: "ƒê√£ th√™m b√†i h√°t v√†o album",
        data: result,
      });
    } catch (err) {
      console.error("‚ùå L·ªói th√™m b√†i h√°t v√†o album:", err);
      res.status(400).json({
        success: false,
        message: err.message || "Kh√¥ng th·ªÉ th√™m b√†i h√°t v√†o album",
      });
    }
  }

  // üü© Th√™m nhi·ªÅu b√†i h√°t v√†o album
  async addMultipleSongsToAlbum(req, res) {
    try {
      const { albumId } = req.params;
      const { songIds } = req.body;

      if (!albumId || !Array.isArray(songIds) || songIds.length === 0) {
        return res.status(400).json({
          success: false,
          message: "Danh s√°ch b√†i h√°t kh√¥ng h·ª£p l·ªá",
        });
      }

      const results = await AlbumSongService.addMultipleSongsToAlbum(albumId, songIds);

      res.status(201).json({
        success: true,
        message: "ƒê√£ th√™m nhi·ªÅu b√†i h√°t v√†o album",
        data: results,
      });
    } catch (err) {
      console.error("‚ùå L·ªói th√™m nhi·ªÅu b√†i h√°t:", err);
      res.status(400).json({
        success: false,
        message: err.message || "Kh√¥ng th·ªÉ th√™m nhi·ªÅu b√†i h√°t v√†o album",
      });
    }
  }

  // üü© C·∫≠p nh·∫≠t to√†n b·ªô danh s√°ch b√†i h√°t c·ªßa album
  async updateAlbumSongs(req, res) {
    try {
      const { albumId } = req.params;
      const { songIds } = req.body;

      if (!albumId) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu albumId",
        });
      }

      const result = await AlbumSongService.updateAlbumSongs(albumId, songIds);
      res.status(200).json({
        success: true,
        message: "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch b√†i h√°t trong album",
        data: result,
      });
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t album:", err);
      res.status(400).json({
        success: false,
        message: err.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t album",
      });
    }
  }

  // üü© L·∫•y danh s√°ch b√†i h√°t c·ªßa album
  async getSongsByAlbum(req, res) {
    try {
      const { albumId } = req.params;
      const songs = await AlbumSongService.getSongsByAlbum(albumId);
      res.status(200).json({ success: true, data: songs });
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y b√†i h√°t c·ªßa album:", err);
      res.status(400).json({
        success: false,
        message: err.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i h√°t",
      });
    }
  }

  // üü© X√≥a m·ªôt b√†i h√°t kh·ªèi album
  async removeSongFromAlbum(req, res) {
    try {
      const { albumId, songId } = req.params;

      if (!albumId || !songId) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu albumId ho·∫∑c songId",
        });
      }

      await AlbumSongService.removeSongFromAlbum(albumId, songId);
      res.status(200).json({
        success: true,
        message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi album",
      });
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a b√†i h√°t:", err);
      res.status(400).json({
        success: false,
        message: err.message || "Kh√¥ng th·ªÉ x√≥a b√†i h√°t kh·ªèi album",
      });
    }
  }
}

module.exports = new AlbumSongController();
