const UserRecommendationRepository = require("../infras/repositories/userRecommendationRepository");
const SongRepository = require("../infras/repositories/songRepository");
const { runPythonScript } = require("../utils/pythonRunner");

const UserRecommendationService = {
  // L·∫•y g·ª£i √Ω c∆° b·∫£n (ch·ªâ songId, score, generatedAt)
  async getRecommendationsByUser(userId, limit = 20) {
    const recommendations = await UserRecommendationRepository.getRecommendationsByUser(userId, limit);
    if (!recommendations.length) return [];
    return recommendations;
  },

  // L·∫•y g·ª£i √Ω + th√¥ng tin chi ti·∫øt b√†i h√°t
  async getRecommendationsWithSongDetail(userId, limit = 20) {
    const recommendations = await UserRecommendationRepository.getRecommendationsByUser(userId, limit);
    if (!recommendations.length) return [];

    const songIds = recommendations.map(r => r.songId);
    const sql = `
      SELECT 
        s.songId,
        s.title,
        s.duration,
        s.coverUrl,
        s.fileUrl,
        s.lyric,
        s.views,
        s.releaseDate,
        s.popularityScore,
        si.singerId,
        si.name AS singerName,
        g.genreId,
        g.name AS genreName
      FROM Song s
      LEFT JOIN Singer si ON s.singerId = si.singerId
      LEFT JOIN Genre g ON s.genreId = g.genreId
      WHERE s.songId IN (?)
    `;
    const [songDetails] = await require("../infras/db/connection").promise().query(sql, [songIds]);

    return recommendations.map(rec => {
      const song = songDetails.find(s => s.songId === rec.songId) || null;
      return { ...rec, song };
    });
  },

  // CRUD c√°c g·ª£i √Ω
  async addOrUpdateRecommendation(userId, songId, score, generatedAt) {
    const success = await UserRecommendationRepository.addOrUpdateRecommendation(userId, songId, score, generatedAt);
    if (!success) throw new Error("Th√™m ho·∫∑c c·∫≠p nh·∫≠t g·ª£i √Ω th·∫•t b·∫°i");
    return { message: "Th√™m ho·∫∑c c·∫≠p nh·∫≠t g·ª£i √Ω th√†nh c√¥ng" };
  },

  async addMultipleRecommendations(recommendations = []) {
    if (!recommendations.length) throw new Error("Danh s√°ch g·ª£i √Ω r·ªóng");
    const success = await UserRecommendationRepository.addMultipleRecommendations(recommendations);
    if (!success) throw new Error("Th√™m nhi·ªÅu g·ª£i √Ω th·∫•t b·∫°i");
    return { message: "Th√™m nhi·ªÅu g·ª£i √Ω th√†nh c√¥ng" };
  },

  async removeRecommendation(userId, songId) {
    const success = await UserRecommendationRepository.removeRecommendation(userId, songId);
    if (!success) throw new Error("X√≥a g·ª£i √Ω th·∫•t b·∫°i (c√≥ th·ªÉ g·ª£i √Ω kh√¥ng t·ªìn t·∫°i)");
    return { message: "ƒê√£ x√≥a g·ª£i √Ω th√†nh c√¥ng" };
  },

  async updateUserRecommendations(userId, recommendations = []) {
    const success = await UserRecommendationRepository.updateUserRecommendations(userId, recommendations);
    if (!success) throw new Error("C·∫≠p nh·∫≠t g·ª£i √Ω cho user th·∫•t b·∫°i");
    return { message: "C·∫≠p nh·∫≠t g·ª£i √Ω cho user th√†nh c√¥ng" };
  },

  // üîπ Generate g·ª£i √Ω cho t·∫•t c·∫£ user b·∫±ng Python script
  async generateAllRecommendations() {
    try {
      // Gi·∫£ s·ª≠ Python script n·∫±m ·ªü "python/recommendation.py"
      // Truy·ªÅn flag --mode batch ƒë·ªÉ t√≠nh cho t·∫•t c·∫£ user
      const recommendations = await runPythonScript("python/recommendation.py", ["--mode", "batch"]);
      console.log("‚úÖ Python batch recommendations generated:", recommendations.length);
      return { message: "Generate recommendation cho t·∫•t c·∫£ user th√†nh c√¥ng", data: recommendations };
    } catch (error) {
      console.error("‚ùå Failed to generate recommendations:", error.message);
      throw new Error("Generate recommendation th·∫•t b·∫°i");
    }
  }
};

module.exports = UserRecommendationService;
