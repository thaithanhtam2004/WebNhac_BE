const AlbumSongRepository = require("../infras/repositories/albumSongRepository");
const SongRepository = require("../infras/repositories/songRepository");
const AlbumRepository = require("../infras/repositories/albumRepository");

const AlbumSongService = {
  // üü¢ L·∫•y danh s√°ch b√†i h√°t trong album - FIX: Ch·ªâ tr·∫£ v·ªÅ songs
  async getSongsByAlbum(albumId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    const songs = await AlbumSongRepository.getSongsByAlbum(albumId);
    return songs; // ‚úÖ Tr·∫£ v·ªÅ array songs thay v√¨ object
  },

  // üü¢ Th√™m m·ªôt b√†i h√°t v√†o album
  async addSongToAlbum(albumId, songId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");

    const success = await AlbumSongRepository.addSongToAlbum(albumId, songId);
    if (!success) throw new Error("Th√™m b√†i h√°t v√†o album th·∫•t b·∫°i");

    return { message: "ƒê√£ th√™m b√†i h√°t v√†o album" };
  },


  // üü¢ Th√™m nhi·ªÅu b√†i h√°t v√†o album (KH√îNG C·∫¶N THAY ƒê·ªîI)
  async addMultipleSongsToAlbum(albumId, songIds) {
    // 1Ô∏è‚É£ Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!Array.isArray(songIds) || songIds.length === 0) {
      throw new Error("Danh s√°ch b√†i h√°t kh√¥ng h·ª£p l·ªá");
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra album t·ªìn t·∫°i
    const album = await AlbumRepository.findById(albumId);
    if (!album) {
      throw new Error("Kh√¥ng t√¨m th·∫•y album");
    }

    // 3Ô∏è‚É£ X√°c minh t·ª´ng b√†i h√°t c√≥ t·ªìn t·∫°i
    for (const songId of songIds) {
      const song = await SongRepository.findById(songId);
      if (!song) {
        throw new Error(`B√†i h√°t v·ªõi ID ${songId} kh√¥ng t·ªìn t·∫°i`);
      }
    }

    // 4Ô∏è‚É£ G·ªçi repository ƒë·ªÉ th√™m b√†i h√°t v√†o album
    // Repository t·ª± ƒë·ªông g√°n trackNumber (index + 1)
    const success = await AlbumSongRepository.addMultipleSongsToAlbum(albumId, songIds);

    if (!success) {
      throw new Error("Kh√¥ng th·ªÉ th√™m nhi·ªÅu b√†i h√°t v√†o album");
    }

    // 5Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return {
      message: "ƒê√£ th√™m nhi·ªÅu b√†i h√°t v√†o album",
      count: songIds.length,
    };
  },


  // üü¢ C·∫≠p nh·∫≠t danh s√°ch b√†i h√°t
  async updateAlbumSongs(albumId, songIds = []) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    // Validate t·∫•t c·∫£ b√†i h√°t t·ªìn t·∫°i
    for (const songId of songIds) {
      const song = await SongRepository.findById(songId);
      if (!song) throw new Error(`B√†i h√°t v·ªõi ID ${songId} kh√¥ng t·ªìn t·∫°i`);
    }

    const songs = songIds.map((songId, index) => ({
      songId,
      trackNumber: index + 1
    }));

    const success = await AlbumSongRepository.updateAlbumSongs(albumId, songs);
    if (!success) throw new Error("C·∫≠p nh·∫≠t danh s√°ch b√†i h√°t th·∫•t b·∫°i");

    return { message: "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch b√†i h√°t cho album" };
  },

  // üü¢ X√≥a b√†i h√°t kh·ªèi album
  async removeSongFromAlbum(albumId, songId) {
    const success = await AlbumSongRepository.removeSongFromAlbum(albumId, songId);
    if (!success) throw new Error("X√≥a b√†i h√°t kh·ªèi album th·∫•t b·∫°i");
    return { message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi album" };
  },
};

module.exports = AlbumSongService;