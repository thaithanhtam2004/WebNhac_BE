const AlbumSongRepository = require("../infras/repositories/albumSongRepository");
const SongRepository = require("../infras/repositories/songRepository");
const AlbumRepository = require("../infras/repositories/albumRepository");

const AlbumSongService = {
  // üü¢ Th√™m b√†i h√°t v√†o album
  async addSongToAlbum(albumId, songId, trackNumber = null) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");

    const success = await AlbumSongRepository.addSongToAlbum(albumId, songId, trackNumber);
    if (!success) throw new Error("Th√™m b√†i h√°t v√†o album th·∫•t b·∫°i");

    return { message: "ƒê√£ th√™m b√†i h√°t v√†o album" };
  },

  // üü¢ X√≥a b√†i h√°t kh·ªèi album
  async removeSongFromAlbum(albumId, songId) {
    const success = await AlbumSongRepository.removeSongFromAlbum(albumId, songId);
    if (!success) throw new Error("X√≥a b√†i h√°t kh·ªèi album th·∫•t b·∫°i");
    return { message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi album" };
  },

  // üü¢ L·∫•y danh s√°ch b√†i h√°t trong album
  async getSongsByAlbum(albumId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    const songs = await AlbumSongRepository.getSongsByAlbum(albumId);
    return { album, songs };
  },

  // üü¢ C·∫≠p nh·∫≠t danh s√°ch b√†i h√°t trong album
  async updateAlbumSongs(albumId, songs = []) {
    if (!Array.isArray(songs)) throw new Error("Danh s√°ch b√†i h√°t kh√¥ng h·ª£p l·ªá");

    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Kh√¥ng t√¨m th·∫•y album");

    const success = await AlbumSongRepository.updateAlbumSongs(albumId, songs);
    if (!success) throw new Error("C·∫≠p nh·∫≠t danh s√°ch b√†i h√°t th·∫•t b·∫°i");

    return { message: "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch b√†i h√°t cho album" };
  },
};

module.exports = AlbumSongService;
