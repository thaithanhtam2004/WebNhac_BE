const crypto = require("crypto");
const bcrypt = require("bcrypt");
const { sendMail } = require("../utils/mailer");
const pool = require("../infras/db/connection");

// L∆∞u OTP t·∫°m th·ªùi trong b·ªô nh·ªõ (c√≥ th·ªÉ thay b·∫±ng Redis ho·∫∑c DB)
const otpStore = new Map();

// üîπ Sinh m√£ OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
function generateOTP() {
  return crypto.randomInt(100000, 999999).toString();
}

// üîπ G·ª≠i OTP ƒë·∫øn email
async function sendOTP(email) {
  const otp = generateOTP();
  otpStore.set(email, { otp, expires: Date.now() + 5 * 60 * 1000 }); // 5 ph√∫t

  const subject = "M√£ x√°c th·ª±c OTP c·ªßa b·∫°n";
  const html = `
    <h2>Xin ch√†o!</h2>
    <p>M√£ OTP c·ªßa b·∫°n l√†:</p>
    <h3>${otp}</h3>
    <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>5 ph√∫t</b>.</p>
  `;

  await sendMail(email, subject, html);
  console.log(`üì© ƒê√£ g·ª≠i OTP ${otp} ƒë·∫øn ${email}`);
}

// üîπ X√°c th·ª±c OTP
function verifyOTP(email, userOtp) {
  const record = otpStore.get(email);
  if (!record) return false;
  if (Date.now() > record.expires) {
    otpStore.delete(email);
    return false;
  }
  return record.otp === userOtp;
}

// üîπ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u sau khi OTP h·ª£p l·ªá
async function resetPassword(email, otp, newPassword) {
  try {
    if (!email || !otp || !newPassword) {
      throw new Error("Thi·∫øu email, OTP ho·∫∑c m·∫≠t kh·∫©u m·ªõi.");
    }

    // Ki·ªÉm tra OTP h·ª£p l·ªá
    const valid = verifyOTP(email, otp);
    if (!valid) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashed = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong MySQL
    const [result] = await pool
      .promise()
      .query("UPDATE User SET password = ? WHERE email = ?", [hashed, email]);

    if (result.affectedRows === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.");
    }

    // X√≥a OTP sau khi d√πng
    otpStore.delete(email);

    return { success: true, message: "‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" };
  } catch (err) {
    console.error("‚ùå L·ªói resetPassword:", err.message);
    return { success: false, message: err.message };
  }
}

module.exports = { sendOTP, verifyOTP, resetPassword };
