// src/services/historyService.js
const HistoryRepository = require("../infras/repositories/historyRepository");

const HistoryService = {
  // üü¢ L∆∞u b√†i h√°t v√†o l·ªãch s·ª≠ nghe
  // N·∫øu ƒë√£ t·ªìn t·∫°i => update lastPlayed
  async saveHistory(userId, songId) {
    // Ki·ªÉm tra xem b√†i h√°t ƒë√£ c√≥ trong l·ªãch s·ª≠ ch∆∞a
    const existing = await HistoryRepository.findByUserAndSong(userId, songId);
    if (existing) {
      await HistoryRepository.updateListenedAt(existing.historyId);
      return {
        message: "ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian nghe",
        historyId: existing.historyId,
      };
    } else {
      const historyId = `his_${Date.now()}`; // Ho·∫∑c d√πng ULID
      await HistoryRepository.add({ historyId, userId, songId });
      return { message: "ƒê√£ l∆∞u l·ªãch s·ª≠ nghe", historyId };
    }
  },

  // üü¢ L·∫•y l·ªãch s·ª≠ nghe c·ªßa user
  async getHistoryByUser(userId) {
    return await HistoryRepository.findByUser(userId);
  },

  // üü¢ C·∫≠p nh·∫≠t th·ªùi gian nghe
  async updateHistoryTime(historyId) {
    await HistoryRepository.updateListenedAt(historyId);
    return { message: "ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian nghe" };
  },

  // üü¢ X√≥a to√†n b·ªô l·ªãch s·ª≠ nghe c·ªßa user
  async clearHistory(userId) {
    await HistoryRepository.clear(userId);
    return { message: "ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ nghe" };
  },

  // üü¢ X√≥a 1 b√†i h√°t kh·ªèi l·ªãch s·ª≠
  async removeSongFromHistory(userId, songId) {
    await HistoryRepository.removeSong(userId, songId);
    return { message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi l·ªãch s·ª≠ nghe" };
  },
};

module.exports = HistoryService;
