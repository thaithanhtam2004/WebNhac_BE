const { ulid } = require("ulid");
const GenreRepository = require("../infras/repositories/genreRepository");

const GenreService = {
  // üü¢ L·∫•y t·∫•t c·∫£ th·ªÉ lo·∫°i
  async getAllGenres() {
    return await GenreRepository.findAll();
  },

  // üü¢ L·∫•y th·ªÉ lo·∫°i theo ID
  async getGenreById(genreId) {
    const genre = await GenreRepository.findById(genreId);
    if (!genre) throw new Error("Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i");
    return genre;
  },

  // üü¢ T·∫°o th·ªÉ lo·∫°i m·ªõi
  async createGenre(data) {
    const genreId = ulid();

    await GenreRepository.create({
      genreId,
      name: data.name,
      description: data.description || null,
    });

    return { message: "T·∫°o th·ªÉ lo·∫°i th√†nh c√¥ng", genreId };
  },

  // üü° C·∫≠p nh·∫≠t th·ªÉ lo·∫°i
  async updateGenre(genreId, data) {
    const existing = await GenreRepository.findById(genreId);
    if (!existing) throw new Error("Th·ªÉ lo·∫°i kh√¥ng t·ªìn t·∫°i");

    const success = await GenreRepository.update(genreId, {
      name: data.name,
      description: data.description || null,
    });

    if (!success) throw new Error("C·∫≠p nh·∫≠t th·ªÉ lo·∫°i th·∫•t b·∫°i");
    return { message: "C·∫≠p nh·∫≠t th·ªÉ lo·∫°i th√†nh c√¥ng" };
  },

  // üî¥ X√≥a th·ªÉ lo·∫°i
  async deleteGenre(genreId) {
    const existing = await GenreRepository.findById(genreId);
    if (!existing) throw new Error("Th·ªÉ lo·∫°i kh√¥ng t·ªìn t·∫°i");

    const success = await GenreRepository.delete(genreId);
    if (!success) throw new Error("X√≥a th·ªÉ lo·∫°i th·∫•t b·∫°i");

    return { message: "ƒê√£ x√≥a th·ªÉ lo·∫°i th√†nh c√¥ng" };
  },
};

module.exports = GenreService;
