const { ulid } = require("ulid");
const SongRepository = require("../infras/repositories/songRepository");

const SongService = {
  // üü¢ L·∫•y t·∫•t c·∫£ b√†i h√°t
  async getAllSongs() {
    return await SongRepository.findAll();
  },

  // üü¢ L·∫•y b√†i h√°t theo ID
  async getSongById(songId) {
    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");
    return song;
  },

  // üü¢ C·∫≠p nh·∫≠t l∆∞·ª£t nghe (views)
  async increaseView(songId) {
    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");
    await SongRepository.increaseView(songId);
    return { message: "ƒê√£ c·∫≠p nh·∫≠t l∆∞·ª£t nghe" };
  },

  // üü¢ T·∫°o b√†i h√°t m·ªõi (t·ª± sinh ULID)
  async createSong(data) {
    const songId = ulid();
    await SongRepository.create({ ...data, songId });
    return { message: "T·∫°o b√†i h√°t th√†nh c√¥ng", songId };
  },

  // üü¢ C·∫≠p nh·∫≠t b√†i h√°t
  async updateSong(songId, data) {
    const success = await SongRepository.update(songId, data);
    if (!success) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i (b√†i h√°t kh√¥ng t·ªìn t·∫°i)");
    return { message: "C·∫≠p nh·∫≠t b√†i h√°t th√†nh c√¥ng" };
  },

  // üü¢ X√≥a b√†i h√°t
  async deleteSong(songId) {
    const success = await SongRepository.delete(songId);
    if (!success) throw new Error("X√≥a th·∫•t b·∫°i (b√†i h√°t kh√¥ng t·ªìn t·∫°i)");
    return { message: "ƒê√£ x√≥a b√†i h√°t th√†nh c√¥ng" };
  }
};

module.exports = SongService;
