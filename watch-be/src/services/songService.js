const { ulid } = require("ulid");
const SongRepository = require("../infras/repositories/songRepository");
const SingerRepository = require("../infras/repositories/singerRepository");

const SongService = {
  // üü¢ L·∫•y t·∫•t c·∫£ b√†i h√°t
  async getAllSongs() {
    return await SongRepository.findAll();
  },

  // üü¢ L·∫•y b√†i h√°t theo ID
  async getSongById(songId) {
    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");
    return song;
  },

  // üü¢ TƒÉng l∆∞·ª£t nghe (views)
  async increaseView(songId) {
    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i h√°t");
    await SongRepository.increaseView(songId);
    return { message: "ƒê√£ tƒÉng l∆∞·ª£t nghe th√†nh c√¥ng" };
  },

  // üü¢ T·∫°o b√†i h√°t m·ªõi (KH√îNG upload, ch·ªâ l∆∞u data)
  async createSong(data) {
    const songId = ulid();

    await SongRepository.create({
      ...data,
      songId,
    });

    return { message: "T·∫°o b√†i h√°t th√†nh c√¥ng", songId };
  },

  // üü¢ C·∫≠p nh·∫≠t b√†i h√°t (KH√îNG upload, ch·ªâ c·∫≠p nh·∫≠t data)
  async updateSong(songId, data) {
    const song = await SongRepository.findById(songId);
    if (!song) throw new Error("B√†i h√°t kh√¥ng t·ªìn t·∫°i");

    const success = await SongRepository.update(songId, data);

    if (!success) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    return { message: "C·∫≠p nh·∫≠t b√†i h√°t th√†nh c√¥ng" };
  },

  // üü¢ X√≥a b√†i h√°t
  async deleteSong(songId) {
    const success = await SongRepository.delete(songId);
    if (!success) throw new Error("X√≥a th·∫•t b·∫°i (b√†i h√°t kh√¥ng t·ªìn t·∫°i)");
    return { message: "ƒê√£ x√≥a b√†i h√°t th√†nh c√¥ng" };
  },

  async getSongByReleaseDate(){
    return await SongRepository.findByReleaseDateDesc();
  },


  async searchSongs(query) {
  try {
    if (!query || query.trim() === '') {
      return {
        success: false,
        data: [],
        total: 0,
        message: 'Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm'
      };
    }

    // ‚úÖ S·ª≠a: vi·∫øt hoa SongRepository
    const songs = await SongRepository.searchSongs(query.trim());
    
    return {
      success: true,
      data: songs,
      total: songs.length,
      message: songs.length > 0 
        ? `T√¨m th·∫•y ${songs.length} k·∫øt qu·∫£` 
        : 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o'
    };
  } catch (error) {
    console.error('Search songs error:', error);
    throw new Error(`T√¨m ki·∫øm b√†i h√°t th·∫•t b·∫°i: ${error.message}`);
  }
}, 

  async searchAll(query) {
  try {
    if (!query || query.trim() === '') {
      return {
        success: false,
        data: { songs: [], singers: [], genres: [] },
        message: 'Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm'
      };
    }

    const results = await SongRepository.searchAll(query.trim());
    
    return {
      success: true,
      data: results,
      message: 'T√¨m ki·∫øm th√†nh c√¥ng'
    };
  } catch (error) {
    console.error('Search all error:', error);
    throw new Error(`T√¨m ki·∫øm th·∫•t b·∫°i: ${error.message}`);
  }
},

async getSongsBySinger(singerId) {
  return await SongRepository.findBySingerId(singerId);
},

async getSongsByGenre(genreId) {
  return await SongRepository.findByGenreId(genreId);
}

  async getAllSongsWithFeature() {
    const songs = await SongRepository.findAllWithFeature();
    return songs;
  },


};


module.exports = SongService;