const { ulid } = require("ulid");
const bcrypt = require("bcrypt");
const UserRepository = require("../infras/repositories/userRepository");
const RoleRepository = require("../infras/repositories/roleRepository"); // ƒë·ªÉ l·∫•y role n·∫øu c·∫ßn
const jwt = require("jsonwebtoken");

const SALT_ROUNDS = 10;

const UserService = {
  // üü¢ ƒêƒÉng k√Ω
  async register({ name, email, phone, password }) {
    const existing = await UserRepository.findByEmail(email);
    if (existing) throw new Error("Email ƒë√£ t·ªìn t·∫°i");

    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    const userId = ulid();

    await UserRepository.create({
      userId,
      name,
      email,
      phone,
      password: hashedPassword,
      roleId: null,
    });

    return { message: "ƒêƒÉng k√Ω th√†nh c√¥ng", userId };
  },

  // üü¢ ƒêƒÉng nh·∫≠p
  async login({ email, password }) {
    const user = await UserRepository.findByEmail(email);
    if (!user || !user.isActive) throw new Error("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a");

    const match = await bcrypt.compare(password, user.password);
    if (!match) throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");

    const token = jwt.sign(
      { userId: user.userId, roleId: user.roleId, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    return token;
  },

  // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (admin)
  async getAllUsers(currentUser) {
    if (!currentUser || currentUser.roleName !== "Admin") throw new Error("Kh√¥ng c√≥ quy·ªÅn");
    return await UserRepository.findAll();
  },

  // üü¢ L·∫•y th√¥ng tin theo ID
  async getUserById(userId) {
    const user = await UserRepository.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
    return user;
  },

  // üü¢ ƒê·ªïi m·∫≠t kh·∫©u
  async changePassword(userId, { oldPassword, newPassword }) {
    const user = await UserRepository.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    const match = await bcrypt.compare(oldPassword, user.password);
    if (!match) throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");

    const hashedPassword = await bcrypt.hash(newPassword, SALT_ROUNDS);
    const success = await UserRepository.updatePassword(userId, hashedPassword);
    if (!success) throw new Error("ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");

    return { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" };
  },

  // üü¢ V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng (admin)
  async disableUser(userId, currentUser) {
    if (!currentUser || currentUser.roleName !== "Admin") throw new Error("Kh√¥ng c√≥ quy·ªÅn");

    const user = await UserRepository.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

    const success = await UserRepository.disableUser(userId);
    if (!success) throw new Error("V√¥ hi·ªáu h√≥a th·∫•t b·∫°i");

    return { message: "Ng∆∞·ªùi d√πng ƒë√£ b·ªã v√¥ hi·ªáu h√≥a" };
  }
};

module.exports = UserService;
