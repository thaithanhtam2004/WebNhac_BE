const { ulid } = require("ulid");
const cloudinary = require("../utils/config/cloudinary");
const AlbumRepository = require("../infras/repositories/albumRepository");
const SingerRepository = require("../infras/repositories/singerRepository");
const AlbumSongRepository = require("../infras/repositories/albumSongRepository");

const AlbumService = {
  // üü¢ L·∫•y t·∫•t c·∫£ album
  async getAllAlbums() {
    return await AlbumRepository.findAll();
  },

  // üü¢ L·∫•y chi ti·∫øt album k√®m b√†i h√°t
  async getAlbumById(albumId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Album kh√¥ng t·ªìn t·∫°i");

    const songs = await AlbumSongRepository.getSongsByAlbum(albumId);
    return { ...album, songs };
  },

  // üü¢ L·∫•y danh s√°ch album theo ca sƒ©
  async getAlbumsBySinger(singerId) {
    const singer = await SingerRepository.findById(singerId);
    if (!singer) throw new Error("Ca sƒ© kh√¥ng t·ªìn t·∫°i");

    return await AlbumRepository.findBySingerId(singerId);
  },

  // üü¢ Upload ·∫£nh b√¨a l√™n Cloudinary
  async uploadCover(file) {
    if (!file) return null;
    try {
      const base64 = file.buffer.toString("base64");
      const uploadRes = await cloudinary.uploader.upload(
        `data:${file.mimetype};base64,${base64}`,
        { folder: "albums", resource_type: "image" }
      );
      return uploadRes.secure_url;
    } catch (err) {
      console.error("‚ùå L·ªói upload Cloudinary:", err.message);
      throw new Error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n Cloudinary");
    }
  },

  // üü¢ T·∫°o album m·ªõi
  async createAlbum(data, file) {
    if (!data.name?.trim()) throw new Error("T√™n album kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");

    const singer = await SingerRepository.findById(data.singerId);
    if (!singer) throw new Error("Ca sƒ© kh√¥ng t·ªìn t·∫°i");

    const coverUrl = await this.uploadCover(file);

    const albumId = ulid();
    await AlbumRepository.create({
      albumId,
      name: data.name.trim(),
      singerId: data.singerId,
      coverUrl,
      description: data.description || null,
      totalViews: 0,
      releaseDate: data.releaseDate || null,
    });

    return { message: "T·∫°o album th√†nh c√¥ng", albumId };
  },

  // üü¢ C·∫≠p nh·∫≠t album
  async updateAlbum(albumId, data, file) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Album kh√¥ng t·ªìn t·∫°i");

    if (data.singerId) {
      const singer = await SingerRepository.findById(data.singerId);
      if (!singer) throw new Error("Ca sƒ© kh√¥ng t·ªìn t·∫°i");
    }

    if (file) {
      data.coverUrl = await this.uploadCover(file);
    }

    const success = await AlbumRepository.update(albumId, data);
    if (!success) throw new Error("C·∫≠p nh·∫≠t album th·∫•t b·∫°i");

    return { message: "C·∫≠p nh·∫≠t album th√†nh c√¥ng" };
  },

  // üü¢ X√≥a album (v√† to√†n b·ªô b√†i h√°t li√™n k·∫øt)
  async deleteAlbum(albumId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Album kh√¥ng t·ªìn t·∫°i");

    // X√≥a t·∫•t c·∫£ li√™n k·∫øt trong AlbumSong
    await AlbumSongRepository.updateAlbumSongs(albumId, []);

    const success = await AlbumRepository.delete(albumId);
    if (!success) throw new Error("X√≥a album th·∫•t b·∫°i");

    return { message: "ƒê√£ x√≥a album th√†nh c√¥ng" };
  },
};

module.exports = AlbumService;
