const { ulid } = require("ulid");
const cloudinary = require("../utils/config/cloudinary");
const AlbumRepository = require("../infras/repositories/albumRepository");
const SingerRepository = require("../infras/repositories/singerRepository");

const AlbumService = {
  async getAllAlbums() {
    return await AlbumRepository.findAll();
  },

  async getAlbumById(albumId) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Album kh√¥ng t·ªìn t·∫°i");
    return album;
  },

  async getAlbumsBySinger(singerId) {
    const albums = await AlbumRepository.findBySingerId(singerId);
    return albums;
  },

  async createAlbum(data, file) {
    if (!data.name) throw new Error("T√™n album kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    const singer = await SingerRepository.findById(data.singerId);
    if (!singer) throw new Error("Ca sƒ© kh√¥ng t·ªìn t·∫°i");

    // üñº Upload ·∫£nh l√™n Cloudinary (n·∫øu c√≥)
    let coverUrl = data.coverUrl || null;
    if (file) {
      const base64 = file.buffer.toString("base64");
      const uploadRes = await cloudinary.uploader.upload(
        `data:${file.mimetype};base64,${base64}`,
        { folder: "albums", resource_type: "image" }
      );
      coverUrl = uploadRes.secure_url;
    }

    const albumId = ulid();
    await AlbumRepository.create({ ...data, albumId, coverUrl });

    return { message: "T·∫°o album th√†nh c√¥ng", albumId };
  },

  async updateAlbum(albumId, data, file) {
    const album = await AlbumRepository.findById(albumId);
    if (!album) throw new Error("Album kh√¥ng t·ªìn t·∫°i");

    if (data.singerId) {
      const singer = await SingerRepository.findById(data.singerId);
      if (!singer) throw new Error("Ca sƒ© kh√¥ng t·ªìn t·∫°i");
    }

    if (file) {
      const base64 = file.buffer.toString("base64");
      const uploadRes = await cloudinary.uploader.upload(
        `data:${file.mimetype};base64,${base64}`,
        { folder: "albums", resource_type: "image" }
      );
      data.coverUrl = uploadRes.secure_url;
    }

    const success = await AlbumRepository.update(albumId, data);
    if (!success) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");

    return { message: "C·∫≠p nh·∫≠t album th√†nh c√¥ng" };
  },

  async deleteAlbum(albumId) {
    const success = await AlbumRepository.delete(albumId);
    if (!success) throw new Error("X√≥a th·∫•t b·∫°i (album kh√¥ng t·ªìn t·∫°i)");
    return { message: "ƒê√£ x√≥a album th√†nh c√¥ng" };
  },
};

module.exports = AlbumService;
