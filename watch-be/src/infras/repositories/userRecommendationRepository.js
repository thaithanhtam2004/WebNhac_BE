const pool = require("../db/connection").promise();

const UserRecommendationRepository = {
  // üü¢ L·∫•y danh s√°ch g·ª£i √Ω cho user
  async getRecommendationsByUser(userId, limit = 20) {
    const sql = `
      SELECT userId, songId, score, generatedAt
      FROM UserRecommendation
      WHERE userId = ?
      ORDER BY score DESC
      LIMIT ?
    `;
    const [rows] = await pool.query(sql, [userId, limit]);
    return rows;
  },

  // üü¢ Th√™m ho·∫∑c c·∫≠p nh·∫≠t 1 g·ª£i √Ω
  async addOrUpdateRecommendation(userId, songId, score, generatedAt = new Date()) {
    const sql = `
      INSERT INTO UserRecommendation (userId, songId, score, generatedAt)
      VALUES (?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE score = VALUES(score), generatedAt = VALUES(generatedAt)
    `;
    const [result] = await pool.query(sql, [userId, songId, score, generatedAt]);
    return result.affectedRows > 0;
  },

  // üÜï Th√™m nhi·ªÅu g·ª£i √Ω c√πng l√∫c
  async addMultipleRecommendations(recommendations = []) {
    if (!recommendations.length) return false;

    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();

      const insertSql = `
        INSERT INTO UserRecommendation (userId, songId, score, generatedAt)
        VALUES (?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE score = VALUES(score), generatedAt = VALUES(generatedAt)
      `;

      for (const rec of recommendations) {
        const { userId, songId, score, generatedAt } = rec;
        await connection.query(insertSql, [userId, songId, score, generatedAt || new Date()]);
      }

      await connection.commit();
      return true;
    } catch (error) {
      await connection.rollback();
      console.error("‚ùå addMultipleRecommendations error:", error);
      throw error;
    } finally {
      connection.release();
    }
  },

  // üü¢ X√≥a g·ª£i √Ω
  async removeRecommendation(userId, songId) {
    const sql = `DELETE FROM UserRecommendation WHERE userId = ? AND songId = ?`;
    const [result] = await pool.query(sql, [userId, songId]);
    return result.affectedRows > 0;
  },

  // üü¢ C·∫≠p nh·∫≠t to√†n b·ªô g·ª£i √Ω c·ªßa user (th∆∞·ªùng d√πng sau khi ch·∫°y Python script)
  async updateUserRecommendations(userId, recommendations = []) {
    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();

      // X√≥a to√†n b·ªô g·ª£i √Ω c≈©
      await connection.query(`DELETE FROM UserRecommendation WHERE userId = ?`, [userId]);

      // Th√™m danh s√°ch m·ªõi
      if (recommendations.length > 0) {
        const insertSql = `
          INSERT INTO UserRecommendation (userId, songId, score, generatedAt)
          VALUES (?, ?, ?, ?)
        `;
        for (const rec of recommendations) {
          const { songId, score, generatedAt } = rec;
          await connection.query(insertSql, [userId, songId, score, generatedAt || new Date()]);
        }
      }

      await connection.commit();
      return true;
    } catch (error) {
      await connection.rollback();
      console.error("‚ùå updateUserRecommendations error:", error);
      throw error;
    } finally {
      connection.release();
    }
  },
};

module.exports = UserRecommendationRepository;
